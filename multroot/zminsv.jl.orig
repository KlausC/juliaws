function zminsv{S<:Number,U<:AbstractFloat}(A::AbstractArray{S,2}, tol::U)
#
#  zminsv calculates the smallest singular value
#  of matrix A and the associated right singular vector
#  via an implicit inverse iteration in the form of the
#  Gauss-Newton iteration
#
#    input  A --- the matrix
#           tol --- the error tolerence
#
#   output  s --- the smallest singular value
#           x --- the associated right singular vector
#
    E = one(S)
    m, n = size(A)           	# get the dimensions of A
    if m < n throw(ArgumentError("zminsv only if m >=n but $m < $n")) end
    scale = norm(A, Inf)     	# get the magnitude of rows as scaler
    a = map(S, rand(1,n)) *2-1	# random initial vector (row)
    a = scale * a / norm(a)  	# set the first row
   
    Q, R = qr(A)             	# QR decomp. of A, maybe input

 	n1 = size(R, 1) + 1 
    b = [scale; zeros(S, n1-1)]

    QQ, RR = hessqr([a; R]) 	# Hessenberg QR decomp. of stacked matrix
    z = hqrt(QQ, b)        	# same Q on b
   
    x = backsub(RR[1:n,1:n], z[1:n]);
	x = x / norm(x)				# getting the new vector
   
    r = R * x
    ss = norm(r)
	cr = 0
	y = x

    for k = 1:10

        QQ, RR = hessqr([2 * scale * x'; R]) 
        z = hqrt(QQ, [0;r]) 
        u = backsub(RR[1:n,1:n], z[1:n])
        y = x - u
        y = y / norm(y)
        r = R * y 
        ss = norm(r)
        crk = norm(u)
		# println("ss = $ss crk = $crk")
      
        if k == 1
            if crk < tol
			    break
            end
        else
            if crk < cr
                if crk^2 / (cr - crk) < tol 
                    break
                end
            end
        end
        x = y
        cr = crk
		println("hessenberg least square iteration $k: smin = $ss")
    end
    ss, y
end
